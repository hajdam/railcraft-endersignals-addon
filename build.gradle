description = 'Railcraft Ender Signals Addon'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        // classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

['java-library', 'maven-publish', 'forge'].each {
    apply plugin: it
}
import org.gradle.util.VersionNumber

sourceCompatibility = 1.6
targetCompatibility = 1.6

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

version = project.minecraft_version + '-' + project.version
group = project.group

minecraft {
    version = project.minecraft_version + "-" + project.forge_version
    runDir = "run"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    doFirst {
        options.fork = true
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
                options.bootstrapClasspath = files("${System.properties['java.home']}/lib/rt.jar", "$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar")
            } else {
                options.bootClasspath = "${System.properties['java.home']}/lib/rt.jar"
                options.bootClasspath += "$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar"
            }
        }
    }
}

// Disable tests on build
if (!gradle.startParameter.taskNames.any {it.endsWith("test")}) {
    tasks.withType(Test) {enabled = false}
}

jar {
	into('') {
		from project.rootDir
		include 'changes.txt'
	}
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier "tests"
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java
}

javadoc {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.addBooleanOption('html5', true)
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

repositories {
    mavenCentral()
    flatDir {
        dirs "lib"
    }
}

dependencies {
    implementation ":Railcraft_1.7.10-9.12.2.0"
    implementation ':jsr305-3.0.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'
    testCompile group : 'junit', name: 'junit', version: '4.10'
}

// This task creates a .jar file containing the source code of this mod.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// This task creates a .jar file containing a deobfuscated version of this mod, for other developers to use in a development environment.
task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}

// Creates the listed artifacts on building the mod.
artifacts {
    archives sourcesJar
    archives devJar
}


processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// This block configures any maven publications you want to make.
publishing {
    publications {
        mavenJava(MavenPublication) {
        // Add any other artifacts here that you would like to publish!
            artifact(jar) {
                builtBy build
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
            artifact(devJar) {
                builtBy devJar
            }
        }
    }

    // This block selects the repositories you want to publish to.
    repositories {
        // Add the repositories you want to publish to here.
    }
}